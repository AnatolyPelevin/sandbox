package com.ringcentral.analytics.adobe;

import com.ringcentral.analytics.adobe.service.HDFSService;
import com.ringcentral.analytics.adobe.service.handlers.ServiceFactory;
import com.ringcentral.analytics.adobe.utils.AdobeUtils;
import com.ringcentral.analytics.adobe.utils.ImportOptions;
import com.ringcentral.analytics.adobe.utils.writer.RecordWriter;
import org.apache.hadoop.fs.Path;

import java.io.IOException;
import java.lang.reflect.Array;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.util.Arrays.asList;

public class Test {
    private String itemId;
    private String value;
    private LinkedHashSet<Integer> data = null;

    public Test(String itemId, String value, LinkedHashSet<Integer> data) {
        this.itemId = itemId;
        this.value = value;
        this.data = data;
    }

    public static void main(String[] args) throws IOException {
//       testResponseReportParsing();
//       testFileWriting(args);
//       testDateConvert();
      convert();

      //  splitDateRange ();
    }

    private static void splitDateRange (){
        final String SEPARATOR = "/";
        String date  = "2019-01-06T00:00:00.000/2020-06-14T00:00:00.000";
        String timeStamp = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.mmm").format(Calendar.getInstance().getTime());
        String q = date.replaceFirst("/.*", "/" + timeStamp);
        System.out.println(q);
        //Arrays.stream(date.split(SEPARATOR)).
        //var dateRange = date.split(SEPARATOR);
      //  dateRange[1] =
        //Arrays.stream().forEach(st->System.out.println(st));

    }

    private static void convert() {
        List<String> arr = asList(
                "Jan 13, 2019",
                "Apr 14, 2019",
                "Aug 25, 2019",
                "Aug 4, 2019",
                "Jul 7, 2019",
                "Oct 27, 2019",
                "Jun 7, 2020",
                "Apr 7, 2019",
                "Aug 18, 2019",
                "Jan 20, 2019",
                "Oct 20, 2019",
                "Sep 15, 2019",
                "Jan 27, 2019",
                "Jan 6, 2019",
                "Feb 24, 2019",
                "Mar 29, 2020",
                "Feb 9, 2020",
                "Apr 19, 2020",
                "Apr 12, 2020",
                "Nov 10, 2019",
                "Apr 5, 2020",
                "May 24, 2020",
                "Feb 2, 2020",
                "Jan 26, 2020",
                "Jan 5, 2020",
                "Jul 14, 2019",
                "Apr 28, 2019",
                "Apr 21, 2019",
                "Sep 8, 2019",
                "Aug 11, 2019",
                "Sep 29, 2019",
                "Feb 3, 2019",
                "Mar 24, 2019",
                "Mar 15, 2020",
                "Nov 17, 2019",
                "Jun 23, 2019",
                "May 5, 2019",
                "Mar 1, 2020",
                "Jan 12, 2020",
                "May 10, 2020",
                "Nov 24, 2019",
                "Jun 16, 2019",
                "May 17, 2020",
                "Jan 19, 2020",
                "May 26, 2019",
                "Mar 8, 2020",
                "Feb 23, 2020",
                "Jul 28, 2019",
                "Oct 6, 2019",
                "Mar 10, 2019",
                "Apr 26, 2020",
                "Sep 22, 2019",
                "Dec 22, 2019",
                "May 19, 2019",
                "Dec 1, 2019",
                "Jul 21, 2019",
                "Sep 1, 2019",
                "Feb 16, 2020",
                "May 3, 2020",
                "Mar 3, 2019",
                "Oct 13, 2019",
                "Feb 17, 2019",
                "Nov 3, 2019",
                "Jun 30, 2019",
                "Mar 22, 2020",
                "May 12, 2019",
                "Dec 15, 2019",
                "Jun 2, 2019",
                "Mar 31, 2019",
                "Dec 8, 2019",
                "Jun 9, 2019",
                "Mar 17, 2019",
                "Feb 10, 2019",
                "May 31, 2020"

        );
        arr.stream().forEach(row -> {
            System.out.println(row + "->" + testDateConvert(row));
        });
    }

    private static LocalDate testDateConvert(String dateString) {
        // String dateString = "Jan 13, 2019"; // 2019-01-13
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM d, yyyy", Locale.ENGLISH);
        return LocalDate.parse(dateString, formatter);
    }

    private static void testResponseReportParsing() {
        List<Test> list1 = Arrays.asList(new Test("1", "qqqq", new LinkedHashSet<Integer>() {{
            add(0);
            add(2);
        }}));
        List<Test> list2 = Arrays.asList(new Test("1", "qqqq", new LinkedHashSet<Integer>() {{
            add(0);
            add(3);
        }}));
        List<Test> list3 = new ArrayList<>();

        //List<Test> list =  AdobeUtils.concatenate(list1, list2, list3);

        List<List<Test>> reportPartData = new ArrayList<>();
        reportPartData.add(list1);
        reportPartData.add(list2);
        reportPartData.add(list3);

        List<Test> list = AdobeUtils.concatenate(reportPartData);

        String result = list.stream()
                .collect(Collectors.groupingBy(it -> it.value))
                .entrySet().stream().map(it -> "\"" + it.getKey() + "\"" + ", " + it.getValue().stream().flatMap(i -> i.data.stream()).map(Object::toString).collect(Collectors.joining(", "))).collect(Collectors.joining("\n"));
        System.out.println(result);

//        String result = Stream.concat(list1.stream(),
//                Stream.concat(list2.stream(), list3.stream()))
//                .collect(Collectors.groupingBy(it -> it.itemId))
//                .entrySet().stream().map(it -> it.getKey() + ", " + it.getValue().stream().flatMap(i -> i.data.stream()).map(Object::toString).collect(Collectors.joining(", "))).collect(Collectors.joining("\n"));
//
        System.out.println(result);
    }

    private static void testFileWriting(String[] args) throws IOException {
        ServiceFactory serviceFactory = new ServiceFactory();
        HDFSService hdfs = serviceFactory.createHDFS();

        if (!Optional.ofNullable(args).isPresent()) {
            args = new String[]{"element1", "element2", "element3"};
            ;
        }
        ImportOptions options = new ImportOptions(args);

        Path csvTmpPath = new Path(options.getTmpLocation() + "/" + "qqq.csv");
        RecordWriter recordWriter = new RecordWriter(hdfs.getFileSystem(), csvTmpPath.toString(), "qqq");
        try {
            hdfs.delete(csvTmpPath, true);
        } catch (IOException e) {
            e.printStackTrace();
        }

        List<String> arr = asList(
                "\"Jan 13, 2019\", 194072, 69132, 56887, 38785, 12858, 5229, 18015, 187622, 68866, 54753, 38644, 12851, 5228, 1391",
                "\"Apr 14, 2019\", 180416, 67484, 53037, 34765, 11974, 3948, 14869, 176358, 67280, 51700, 34530, 11926, 3947, 12477",
                "\"Aug 25, 2019\", 189509, 67820, 56147, 35734, 12896, 2134, 16689, 184898, 67570, 54876, 35443, 12882, 2133, 13644",
                "\"Aug 4, 2019\", 193590, 67987, 55093, 40633, 13145, 2856, 15689, 188789, 67717, 53670, 40412, 13133, 2854, 12654",
                "\"Jul 7, 2019\", 186633, 70026, 55785, 35302, 12679, 2182, 16619, 181554, 69769, 54335, 35070, 12671, 2180, 13262",
                "\"Oct 27, 2019\", 197787, 73204, 53851, 41818, 13082, 2886, 16889, 194034, 72899, 52812, 41521, 13034, 2886, 14692",
                "\"Jun 7, 2020\", 286312, 74179, 80024, 51353, 15876, 11039, 59104, 279791, 73830, 78476, 49936, 15753, 11035, 55565",
                "\"Apr 7, 2019\", 189098, 70070, 56858, 36528, 12915, 3324, 15449, 184816, 69835, 55397, 36330, 12836, 3322, 12957",
                "\"Aug 18, 2019\", 186595, 66920, 56449, 37403, 13163, 2574, 15584, 182148, 66716, 55144, 37178, 13152, 2573, 12666",
                "\"Jan 20, 2019\", 188315, 65309, 56396, 37898, 13279, 4943, 16469, 182537, 65130, 54475, 37666, 13271, 4941, 12852",
                "\"Oct 20, 2019\", 198936, 72599, 56083, 41727, 13287, 3375, 16247, 195017, 72298, 54980, 41433, 13252, 3373, 13937",
                "\"Sep 15, 2019\", 230468, 89725, 54553, 49632, 13002, 3251, 15875, 225727, 89376, 53289, 49349, 12948, 3250, 12913",
                "\"Jan 27, 2019\", 193884, 68070, 58282, 38785, 13582, 3878, 17307, 188033, 67879, 56377, 38567, 13572, 3876, 13586",
                "\"Jan 6, 2019\", 195899, 69859, 58471, 40735, 13532, 2480, 17227, 189406, 69661, 56319, 40517, 13526, 2479, 13109",
                "\"Feb 24, 2019\", 194335, 71404, 59787, 35059, 12556, 4828, 15870, 188444, 71213, 57880, 34792, 12532, 4827, 12206",
                "\"Mar 29, 2020\", 434825, 117011, 101668, 100097, 22889, 27470, 69947, 394765, 114725, 97093, 83970, 22059, 23501, 58139",
                "\"Feb 9, 2020\", 211711, 85691, 58473, 40138, 13451, 3840, 20702, 207135, 85396, 57323, 39535, 13338, 3840, 18067",
                "\"Apr 19, 2020\", 358866, 91614, 87277, 63631, 19673, 21128, 69574, 336258, 89678, 83695, 62277, 19056, 21111, 59919",
                "\"Apr 12, 2020\", 341384, 96279, 85649, 70769, 21264, 22802, 59331, 325019, 95170, 82366, 68058, 20548, 22775, 50410",
                "\"Nov 10, 2019\", 201485, 78033, 53300, 38200, 12841, 2650, 16966, 197711, 77739, 52262, 37900, 12792, 2649, 14708",
                "\"Apr 5, 2020\", 384147, 118782, 86895, 84145, 22073, 26100, 64986, 364362, 116364, 83089, 80025, 21432, 26082, 55207",
                "\"May 24, 2020\", 271659, 76530, 72084, 45715, 14912, 10443, 59392, 265201, 76036, 70545, 44822, 14760, 10440, 55628",
                "\"Feb 2, 2020\", 206923, 82241, 56510, 40624, 14667, 4272, 19636, 202507, 81981, 55372, 40146, 14549, 4271, 17048",
                "\"Jan 26, 2020\", 204335, 79596, 54881, 40377, 13469, 6013, 20174, 199904, 79312, 53666, 39933, 13360, 6013, 17604",
                "\"Jan 5, 2020\", 200318, 80228, 54657, 38341, 13382, 5870, 17888, 196278, 79948, 53529, 37953, 13333, 5870, 15525",
                "\"Jul 14, 2019\", 182373, 67161, 55242, 35092, 13017, 2127, 15653, 177203, 66931, 53781, 34860, 13010, 2127, 12213",
                "\"Apr 28, 2019\", 180262, 68384, 52931, 34550, 11697, 2350, 15590, 175497, 68154, 51503, 34293, 11685, 2348, 12580",
                "\"Apr 21, 2019\", 182897, 68563, 53436, 34273, 11885, 4971, 15285, 178400, 68340, 52002, 34076, 11870, 4971, 12481",
                "\"Sep 8, 2019\", 200690, 68178, 55263, 45009, 12317, 3220, 15726, 195941, 67853, 53979, 44729, 12294, 3220, 12699",
                "\"Aug 11, 2019\", 188592, 67273, 53794, 41260, 13333, 2420, 15473, 184002, 67036, 52508, 41020, 13324, 2418, 12451",
                "\"Sep 29, 2019\", 199056, 73699, 56457, 40812, 12911, 2224, 15866, 194477, 73354, 55255, 40507, 12856, 2224, 13026",
                "\"Feb 3, 2019\", 189587, 66354, 58043, 36695, 12732, 3860, 17256, 183905, 66192, 56117, 36450, 12727, 3859, 13690",
                "\"Mar 24, 2019\", 197906, 76277, 64305, 25541, 15912, 4429, 15092, 192193, 76030, 62755, 25469, 14584, 4427, 12495",
                "\"Mar 15, 2020\", 428680, 144529, 110093, 81725, 23138, 17842, 59618, 409541, 143547, 105900, 79077, 21867, 17839, 49102",
                "\"Nov 17, 2019\", 210712, 82336, 52815, 39527, 13349, 3478, 18046, 206881, 82084, 51800, 39206, 13313, 3477, 15697",
                "\"Jun 23, 2019\", 177375, 67483, 53505, 32160, 13153, 1703, 15478, 172555, 67236, 52109, 31939, 13147, 1702, 12340",
                "\"May 5, 2019\", 178330, 66213, 52760, 34164, 11250, 3851, 15425, 173519, 65968, 51425, 33915, 11238, 3850, 12294",
                "\"Mar 1, 2020\", 223392, 91401, 58405, 39701, 13199, 6631, 22164, 218868, 91074, 57197, 39258, 13077, 6631, 19643",
                "\"Jan 12, 2020\", 205694, 81798, 55865, 38351, 14078, 6468, 18127, 201481, 81510, 54672, 37982, 13988, 6466, 15693",
                "\"May 10, 2020\", 316153, 79042, 85718, 53007, 18196, 15189, 71152, 307234, 78353, 83647, 52049, 17906, 15184, 66525",
                "\"Nov 24, 2019\", 165283, 69052, 39846, 28363, 10736, 4272, 13714, 162735, 68820, 39116, 28186, 10703, 4272, 12221",
                "\"Jun 16, 2019\", 181526, 69058, 53134, 32461, 13353, 2838, 15814, 176580, 68813, 51817, 32055, 13341, 2835, 12647",
                "\"May 17, 2020\", 309394, 84463, 83087, 53481, 16636, 14076, 67016, 301257, 84017, 80956, 52419, 16422, 14073, 62266",
                "\"Jan 19, 2020\", 202835, 78250, 54962, 38087, 13571, 7771, 18156, 198682, 77978, 53774, 37752, 13481, 7771, 15734",
                "\"May 26, 2019\", 174145, 63419, 50811, 35098, 12415, 1826, 14967, 169297, 63168, 49384, 34866, 12401, 1826, 11853",
                "\"Mar 8, 2020\", 252839, 92778, 68450, 46730, 15318, 7141, 27933, 246390, 92380, 66678, 46023, 14868, 7138, 24516",
                "\"Feb 23, 2020\", 219537, 87138, 56855, 39633, 12961, 5169, 22027, 215131, 86908, 55681, 39117, 12859, 5168, 19480",
                "\"Jul 28, 2019\", 189955, 67696, 55648, 39129, 12807, 3406, 15836, 185001, 67430, 54259, 38880, 12792, 3406, 12621",
                "\"Oct 6, 2019\", 196054, 72217, 57006, 40225, 12640, 2403, 15675, 192165, 71906, 55837, 39918, 12589, 2402, 13457",
                "\"Dec 29, 2019\", 135450, 57997, 36076, 23001, 10619, 3116, 9519, 133423, 57783, 35469, 22814, 10580, 3116, 8464",
                "\"Mar 10, 2019\", 196370, 74366, 58907, 35444, 13182, 3981, 15538, 191735, 74077, 57416, 35213, 13142, 3980, 12836",
                "\"Apr 26, 2020\", 334237, 86210, 88702, 59042, 18303, 16593, 74711, 323980, 85396, 86269, 57972, 17938, 16582, 69317",
                "\"Sep 22, 2019\", 219919, 84636, 54211, 43623, 13378, 3193, 15973, 215019, 84275, 52934, 43302, 13315, 3192, 12934",
                "\"Dec 22, 2019\", 121753, 55630, 28216, 15031, 8653, 1587, 8306, 120311, 55415, 27805, 14906, 8628, 1586, 7591",
                "\"May 19, 2019\", 180715, 67251, 53811, 33066, 13256, 2465, 16482, 175957, 67023, 52393, 32811, 13249, 2465, 13436",
                "\"Dec 1, 2019\", 206314, 89175, 50655, 37813, 13141, 3738, 18067, 202641, 88897, 49644, 37518, 13102, 3738, 15846",
                "\"Jul 21, 2019\", 182088, 65693, 54200, 37830, 12336, 2464, 15421, 176719, 65436, 52716, 37594, 12331, 2464, 11805",
                "\"Sep 1, 2019\", 182485, 63133, 52615, 37682, 11391, 2926, 14727, 178566, 62891, 51527, 37440, 11384, 2925, 12177",
                "\"Feb 16, 2020\", 203241, 80849, 54894, 37495, 13022, 4082, 19708, 198991, 80614, 53787, 36912, 12944, 4082, 17291",
                "\"May 3, 2020\", 314187, 80425, 87413, 52595, 18369, 13378, 70129, 305707, 79964, 85166, 51655, 18030, 13370, 65212",
                "\"Mar 3, 2019\", 195505, 72438, 60356, 34397, 12787, 4861, 16237, 190394, 72273, 58674, 34134, 12755, 4860, 13032",
                "\"Oct 13, 2019\", 197448, 72448, 54662, 40434, 13233, 4103, 16948, 193649, 72168, 53453, 40146, 13201, 4103, 14777",
                "\"Feb 17, 2019\", 184918, 64946, 57830, 33623, 13104, 4637, 16510, 179313, 64794, 56075, 33399, 13099, 4635, 12902",
                "\"Nov 3, 2019\", 205918, 77337, 55687, 41808, 13488, 2862, 18469, 201911, 77020, 54563, 41494, 13431, 2861, 16133",
                "\"Jun 30, 2019\", 157595, 60564, 47236, 28611, 11087, 2322, 12888, 153979, 60324, 46121, 28421, 11077, 2321, 10663",
                "\"Mar 22, 2020\", 437110, 124219, 108149, 99370, 22618, 25566, 70035, 395066, 121634, 103522, 83550, 21676, 20708, 57369",
                "\"May 12, 2019\", 178119, 65606, 52999, 33192, 12282, 3164, 16040, 173417, 65354, 51609, 32926, 12270, 3164, 13070",
                "\"Dec 15, 2019\", 226255, 97698, 48976, 34081, 11924, 5002, 31701, 222458, 97391, 47929, 33780, 11882, 5002, 29468",
                "\"Jun 2, 2019\", 188865, 69480, 55050, 37283, 13786, 1759, 15778, 183567, 69218, 53450, 36955, 13778, 1758, 12498",
                "\"Mar 31, 2019\", 193906, 72172, 58835, 35276, 13198, 4542, 15405, 189073, 71913, 57298, 35095, 12692, 4542, 12883",
                "\"Dec 8, 2019\", 215090, 91712, 50670, 37881, 12226, 3188, 24283, 211266, 91413, 49628, 37574, 12195, 3187, 22010",
                "\"Jun 9, 2019\", 182461, 68094, 53505, 35196, 13258, 2138, 15848, 177248, 67828, 51949, 34890, 13247, 2136, 12584",
                "\"Mar 17, 2019\", 194421, 73397, 58940, 32780, 14972, 3701, 15504, 189351, 73195, 57428, 32558, 14356, 3698, 12872",
                "\"Feb 10, 2019\", 194169, 70104, 59597, 35493, 13284, 4031, 17252, 188313, 69920, 57619, 35256, 13277, 4029, 13608",
                "\"May 31, 2020\", 288426, 82854, 78786, 50891, 14488, 12548, 64131, 281142, 82443, 77208, 49642, 14348, 12545, 59783"

        );
        arr.stream().forEach(row -> {
            recordWriter.write(row);
        });

        recordWriter.close();
    }
}

